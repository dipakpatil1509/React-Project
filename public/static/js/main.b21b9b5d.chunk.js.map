{"version":3,"sources":["components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","state","NewsImgUrl","NewsLinks","NewsHeading","index","totalItems","handleChange","setState","document","documentElement","scrollTop","this","forEach","link","fetch","then","response","json","data","ImgUrl","articles","NewsImg","map","news","TempImages","newsImg","className","key","Math","random","src","urlToImage","alt","title","slice","Carousel","Item","style","display","onClick","align","activeIndex","slide","interval","controls","indicators","touch","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8QAoFeA,E,4MAjFXC,MAAQ,CACJC,WAAY,GACZC,UAAY,CAAC,0FAA2F,gGACxF,4GAA6G,wFAC7HC,YAAc,CAAC,0BAA0B,8BACzB,sCAAsC,6BACtDC,MAAO,EACPC,WAAY,G,EAiBhBC,aAAe,WACX,IAAIF,EAAQ,EAAKJ,MAAMI,OAGvBA,GAAS,GAFG,EAAKJ,MAAMK,WAAa,IAKlCD,EAAQ,GAEV,EAAKG,SAAS,CACZH,MAAQA,IAEVI,SAASC,gBAAgBC,UAAY,G,kEA1BrB,IAAD,OACfC,KAAKX,MAAME,UAAUU,SAAQ,SAACC,EAAMT,GAChCU,MAAMD,GACLE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,IAAIC,EAAS,EAAKnB,MAAMC,WACxBkB,EAAOf,GAASc,EAAKE,SACrB,EAAKb,SAAS,CACVN,WAAakB,Y,+BAqBpB,IAAD,OACElB,EAAeU,KAAKX,MAApBC,WACFoB,EAAUpB,IAAe,GACzBA,EAAWqB,KAAI,SAACC,EAAMnB,GAClB,IAAIoB,EAAaD,EAAKD,KAAI,SAAAG,GACtB,OACI,yBAAKC,UAAU,uDAAuDC,IAAMC,KAAKC,UAC7E,gCACI,yBAAKC,IAAKL,EAAQM,WAAYC,IAAKP,EAAQQ,MAAMC,MAAM,EAAG,IAAM,aAKhF,OACI,kBAACC,EAAA,EAASC,KAAV,CAAeV,UAAU,cAAcC,IAAKvB,GACxC,yBAAKsB,UAAU,WACX,wBAAIW,MAAO,CAACC,QAAQ,UAAW,EAAKtC,MAAMG,YAAYC,IACtD,4BAAQsB,UAAU,+BAA+Ba,QAAS,EAAKjC,cAA/D,WAEJ,yBAAKoB,UAAU,uBAAuBc,MAAM,UACxC,yBAAKd,UAAU,OACVF,QAQrB,+CAGJ,OACI,yBAAKE,UAAU,aACX,kBAACS,EAAA,EAAD,CAAUM,YAAa9B,KAAKX,MAAMI,MAAOsC,OAAO,EAAOC,SAAU,KAAMC,UAAU,EAAOC,YAAY,EAAOC,OAAO,GAC7GzB,Q,GA3EF0B,IAAMC,W,MCUVC,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCKcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjD,SAASkD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b21b9b5d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Carousel } from 'react-bootstrap'\r\nclass Home extends React.Component {\r\n    state = {\r\n        NewsImgUrl: [],\r\n        NewsLinks : ['https://newsapi.org/v2/top-headlines?country=us&apiKey=a37eb51fc6db489f859a65597f2a5fe4', 'https://newsapi.org/v2/top-headlines?sources=bbc-news&apiKey=a37eb51fc6db489f859a65597f2a5fe4',\r\n                        'https://newsapi.org/v2/top-headlines?country=de&category=business&apiKey=a37eb51fc6db489f859a65597f2a5fe4', 'https://newsapi.org/v2/top-headlines?q=trump&apiKey=a37eb51fc6db489f859a65597f2a5fe4'],\r\n        NewsHeading : ['Top headlines in the US','Top headlines from BBC News',\r\n                        'Top business headlines from Germany','Top headlines about Trump'],\r\n        index: 0,\r\n        totalItems: 4 \r\n    }\r\n\r\n    componentDidMount(){\r\n        this.state.NewsLinks.forEach((link, index) => {\r\n            fetch(link)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                let ImgUrl = this.state.NewsImgUrl\r\n                ImgUrl[index] = data.articles\r\n                this.setState({\r\n                    NewsImgUrl : ImgUrl\r\n                })\r\n            })  \r\n        });\r\n    }\r\n\r\n    handleChange = () => {\r\n        let index = this.state.index\r\n        const max = this.state.totalItems - 1\r\n\r\n        index += 1\r\n\r\n        if (index > max) {\r\n          index = 0\r\n        }\r\n        this.setState({\r\n          index : index\r\n        })\r\n        document.documentElement.scrollTop = 0\r\n    }\r\n        \r\n    render(){\r\n        let { NewsImgUrl } = this.state\r\n        let NewsImg = NewsImgUrl !== [] ? (\r\n            NewsImgUrl.map((news, index) =>{\r\n                let TempImages = news.map(newsImg =>{\r\n                    return (\r\n                        <div className=\"col-xl-2 col-lg-2 col-md-3 col-sm-6 col-xs-6 NewsImg\" key={(Math.random())}>\r\n                            <figure>\r\n                                <img src={newsImg.urlToImage} alt={newsImg.title.slice(0, 50) + '...'}></img>\r\n                            </figure>\r\n                        </div>\r\n                    )\r\n                })\r\n                return (\r\n                    <Carousel.Item className=\"carouselDiv\" key={index}>\r\n                        <div className=\"Heading\">\r\n                            <h1 style={{display:'table'}}>{this.state.NewsHeading[index]}</h1>\r\n                            <button className=\"btn btn-primary changeButton\" onClick={this.handleChange}>Change</button>\r\n                        </div>\r\n                        <div className=\"ImagesGrid container\" align=\"center\">  \r\n                            <div className=\"row\">\r\n                                {TempImages}\r\n                            </div>\r\n                        </div>\r\n                    </Carousel.Item> \r\n                )\r\n                \r\n            })\r\n        ) : (\r\n            <h1>Loading Data...</h1>\r\n        )\r\n        \r\n        return(\r\n            <div className=\"container\">\r\n                <Carousel activeIndex={this.state.index} slide={false} interval={null} controls={false} indicators={false} touch={false}>                  \r\n                    {NewsImg}\r\n                </Carousel>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home\r\n\r\n","import React from 'react';\nimport Home from './components/Home'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}